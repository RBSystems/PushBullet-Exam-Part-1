/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "PushBullet Gold Certification 2016 Part 1"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN

This Module Send Push Command to a PushBullet Service.

To be able to use this module you will need to create a pushbullet account.

Go at https://www.pushbullet.com/


Message$: is the message you will send to the PushBullet Service.

Response$: Is the response you can receiver from the PushBullet Service. Response have been uppercase to avoid typing issues.

Parameter:

DeviceName: Is The Name you want to assign to the devie in the PushBullet Service.
DeviceModel: Is the Model of your Crestron Processor.
Account: Is the email address attached to your PusbBullet Account.
Token: Is the key you need to retreiver from Pushbullet under https://www.pushbullet.com/#settings/account

Any device who is connect to your Pushbullet service will receive all new message$ from your program.
Any Device who is connected to your Pushbullet service can send a response$ to your program.


#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
#USER_SIMPLSHARP_LIBRARY "Pushbullet"
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _skip_,_SKIP_,_SKIP_,_SKIP_,_SKIP_;
// ANALOG_INPUT 
STRING_INPUT _skip_,_SKIP_,_SKIP_,_SKIP_,Message$[128]; 
// BUFFER_INPUT 

DIGITAL_OUTPUT _skip_,_SKIP_,_SKIP_,_SKIP_,_SKIP_;
// ANALOG_OUTPUT 
STRING_OUTPUT _skip_,_SKIP_,_SKIP_,_SKIP_,Response$; 

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER DeviceName[25], DeviceModel[25], Account[128], Token[128];
 
Pushbullet MyPushBullet;

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES DeviceName
	propValidUnits = unitString;
	propDefaultValue = "MyProcessor";
	propShortDescription = "The Name for your Device in PushBullet.";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES DeviceModel
	propValidUnits = unitString;
	propDefaultValue = "MyProcessorModel";
	propShortDescription = "The Model name of your Crestron Processor.";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Account
	propValidUnits = unitString;
	propDefaultValue = "";
	propShortDescription = "The PushBullet Account.";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Token
	propValidUnits = unitString;
	propDefaultValue = "";
	propShortDescription = "The Token provided by your PushBullet Account.";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/

/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE Message$
{
    if(Message$ != "" && Token != "" && Account != "")
	{
        MyPushbullet.sendNote(Account,DeviceName,Message$);
	}
}
		

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

EVENTHANDLER _onPushReceived(PushbulletEventArgs e)
{
	Response$ = upper(e.message);
}
EVENTHANDLER _onPushConnected(PushbulletEventArgs e)
{
	//Connected = e.connect;
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

	WaitForInitializationComplete();
	MyPushbullet.SetDeviceToken(Token);
	MyPushbullet.DeviceName = DeviceName;
	MyPushbullet.DeviceModel = DeviceModel;

	RegisterEvent(PushEvents, onPushReceived, _onPushReceived);
	RegisterEvent(PushEvents, onPushConnected, _onPushConnected);
    Wait(1500)
	{
		CEvent pause;
		MyPushbullet.connect();
		MyPushbullet.AsyncSendAndReceive(); 
	}// If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}


